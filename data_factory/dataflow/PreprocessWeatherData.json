{
	"name": "PreprocessWeatherData",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "historical_weather_bronze",
						"type": "DatasetReference"
					},
					"name": "BronzeWeatherData",
					"description": "Add Weather Data from Bronze Layer"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "cleaned_weather_data",
						"type": "DatasetReference"
					},
					"name": "SilverWeatherData",
					"description": "Export data to Silver layer"
				}
			],
			"transformations": [
				{
					"name": "FlattenAndMapNestedFields",
					"description": "Unrolling nested arrays from 'list'."
				},
				{
					"name": "TimestampAndLocation",
					"description": "Transform timestamp and create unique ID for location (Boston)"
				},
				{
					"name": "RemoveInvalidRows"
				},
				{
					"name": "DerivedColumns",
					"description": "Creating/updating the columns 'message, cod, city_id, calctime, cnt, timestamp, temp, feels_like, pressure, humidity, temp_miÃ¥n, temp_max, wind_speed, wind_deg, wind_gust, clouds_all, weather_id, weather_main, weather_description, weather_icon, corrected_timestamp, location'"
				},
				{
					"name": "RenameAndDrop",
					"description": "Rename columns, Drop unnecessary columns."
				}
			],
			"scriptLines": [
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     wildcardPaths:['bronze/historical_weather/*.json'],",
				"     partitionBy('hash', 1)) ~> BronzeWeatherData",
				"BronzeWeatherData foldDown(unroll(),",
				"     mapColumn(",
				"          message,",
				"          cod,",
				"          city_id,",
				"          calctime,",
				"          cnt,",
				"          timestamp = list.dt,",
				"          temp = list.main.temp,",
				"          feels_like = list.main.feels_like,",
				"          pressure = list.main.pressure,",
				"          humidity = list.main.humidity,",
				"          temp_min = list.main.temp_min,",
				"          temp_max = list.main.temp_max,",
				"          wind_speed = list.wind.speed,",
				"          wind_deg = list.wind.deg,",
				"          wind_gust = list.wind.gust,",
				"          clouds_all = list.clouds.all,",
				"          weather_id = list.weather.id,",
				"          weather_main = list.weather.main,",
				"          weather_description = list.weather.description,",
				"          weather_icon = list.weather.icon,",
				"          main = undefined",
				"     ),",
				"     partitionBy('hash', 1),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenAndMapNestedFields",
				"FlattenAndMapNestedFields derive(corrected_timestamp = iif(length(toString(timestamp)) == 10, timestamp, toInteger(null())),",
				"          location = 'Boston',",
				"     partitionBy('hash', 1)) ~> TimestampAndLocation",
				"TimestampAndLocation filter(!isNull(temp) && !isNull(humidity) && !isNull(feels_like) && !isNull(weather_main)) ~> RemoveInvalidRows",
				"RemoveInvalidRows derive(date_time = toTimestamp(toLong(corrected_timestamp * 1000)),",
				"          id = concat(location, toString(corrected_timestamp)),",
				"          temp_C = round(temp - 273.15),",
				"          temp_min_C = round(temp_min - 273.15),",
				"          temp_max_C = round(temp_max - 273.15),",
				"          feels_like_C = round(feels_like - 273.15),",
				"          temp_min_F = (temp_min-273.15) * 9/5 + 32,",
				"          temp_max_F = (temp_max-273.15) * 9/5 + 32,",
				"          feels_like_F = (feels_like-273.15) * 9/5 + 32,",
				"          lon = -71.0589,",
				"          lat = 42.3601,",
				"          weather_id_value = weather_id,",
				"          weather_main_value = weather_main,",
				"          weather_description_value = weather_description,",
				"          weather_icon_value = weather_icon) ~> DerivedColumns",
				"DerivedColumns select(mapColumn(",
				"          temp_K = temp,",
				"          feels_like_K = feels_like,",
				"          pressure,",
				"          humidity,",
				"          temp_min_K = temp_min,",
				"          temp_max_K = temp_max,",
				"          wind_speed,",
				"          wind_deg,",
				"          wind_gust,",
				"          clouds_all,",
				"          corrected_timestamp,",
				"          location,",
				"          date_time,",
				"          id,",
				"          temp_C,",
				"          temp_min_C,",
				"          temp_max_C,",
				"          feels_like_C,",
				"          temp_min_F,",
				"          temp_max_F,",
				"          feels_like_F,",
				"          lon,",
				"          lat,",
				"          weather_id_value,",
				"          weather_main_value,",
				"          weather_description_value,",
				"          weather_icon_value",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameAndDrop",
				"RenameAndDrop sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['weather_cleaned.parquet'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SilverWeatherData"
			]
		}
	}
}