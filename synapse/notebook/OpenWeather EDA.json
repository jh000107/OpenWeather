{
	"name": "OpenWeather EDA",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "openweather",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "d2f812a8-5527-43be-8795-4029ba5f7e39"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/34f89b90-47ae-412e-8758-934b3c3ef8f7/resourceGroups/junhuicho-DS598/providers/Microsoft.Synapse/workspaces/junhuichosynapse/bigDataPools/openweather",
				"name": "openweather",
				"type": "Spark",
				"endpoint": "https://junhuichosynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/openweather",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# OpenWeather Data EDA"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Configuration\n",
					"\n",
					"- Synapse is connected to my Github, so it is necessary to secure my API key. Key Vault access is only given to my personal account.\n",
					"    - Secured Key: Storage Account Key\n",
					"- Connect to my storage account where the OpenWeather data is stored."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from notebookutils import mssparkutils\n",
					"\n",
					"\n",
					"# Define Key Vault Name\n",
					"key_vault_name = \"openweather-junhui\"\n",
					"secret_name = \"storage-key\"  \n",
					"\n",
					"storage_account_name = \"junhuisa\"\n",
					"storage_account_key = mssparkutils.credentials.getSecret(key_vault_name, secret_name)\n",
					"\n",
					"spark.conf.set(\n",
					"    \"fs.azure.account.key.\" + storage_account_name + \".dfs.core.windows.net\",\n",
					"    storage_account_key\n",
					")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Read data directly from ADLS Gen2\n",
					"container_name = \"blob1\"\n",
					"air_pollution_folder_path = \"bronze/historical_airpollution\"  # Folder, not a single file\n",
					"historical_weather_folder_path = \"bronze/historical_weather\"\n",
					"\n",
					"# Read all JSON files in the folder\n",
					"air_pollution_df = spark.read.json(f\"abfss://{container_name}@{storage_account_name}.dfs.core.windows.net/{air_pollution_folder_path}\")\n",
					"historical_weather_df = spark.read.json(f\"abfss://{container_name}@{storage_account_name}.dfs.core.windows.net/{historical_weather_folder_path}\")"
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Data Observation\n",
					"\n",
					"Taking a look at the raw data."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Show the DataFrame\n",
					"\n",
					"historical_weather_df.head()"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"air_pollution_df.head()"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"historical_weather_df.printSchema()"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Count the number of rows to see if the data is loaded correctly\n",
					"# Ideally, there should be one row for each timestamp\n",
					"\n",
					"historical_weather_df.count()"
				],
				"execution_count": 11
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Restructuring DataFrames"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Flatten the 'list' column\n",
					"\n",
					"historical_weather_df = historical_weather_df.withColumn(\"list\", explode(historical_weather_df[\"list\"]))\n",
					"print(\"Number of rows after flattening the 'list':\", historical_weather_df.count())\n",
					"historical_weather_df.show(10, truncate=False)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Instead of having a merged column of all fields,\n",
					"# extract each field out to have a its own column\n",
					"\n",
					"historical_weather_df = historical_weather_df.selectExpr(\n",
					"    \"calctime\", \n",
					"    \"city_id\", \n",
					"    \"cnt\", \n",
					"    \"cod\", \n",
					"    \"message\", \n",
					"    \"list.dt\",\n",
					"    \"list.main.temp as temp\",\n",
					"    \"list.main.feels_like as feels_like\",\n",
					"    \"list.main.humidity as humidity\",\n",
					"    \"list.main.pressure as pressure\",\n",
					"    \"list.main.temp_min as temp_min\",\n",
					"    \"list.main.temp_max as temp_max\",\n",
					"    \"list.wind.speed as wind_speed\",\n",
					"    \"list.wind.deg as wind_deg\",\n",
					"    \"list.wind.gust as wind_gust\",\n",
					"    \"list.clouds.all as clouds_all\",\n",
					"    \"list.weather.description as weather_description\",\n",
					"    \"list.weather.icon as weather_icon\",\n",
					"    \"list.weather.id as weather_id\",\n",
					"    \"list.weather.main as weather_main\",\n",
					"    \"list.rain.1h as rain_1h\",\n",
					"    \"list.snow.1h as snow_1h\"\n",
					")\n",
					"\n",
					"historical_weather_df.show(10, truncate=False)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Data Cleaning"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Copy in order to preserve the raw data\n",
					"cleaned_weather_df = historical_weather_df.select('*')\n",
					"\n",
					"# Drop meaningless columns\n",
					"columns_to_drop = ['calctime', 'city_id', 'cnt', 'cod', 'message']\n",
					"cleaned_weather_df = cleaned_weather_df.drop(*columns_to_drop)\n",
					"\n",
					"# Order by timestamp\n",
					"cleaned_weather_df = cleaned_weather_df.orderBy(\"dt\")\n",
					"\n",
					"cleaned_weather_df.show(10, truncate=False)"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Convert to pandas for further analysis\n",
					"cleaned_weather_df = cleaned_weather_df.toPandas()\n",
					"\n",
					"weather_pdf.head(10)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"air_pollution_df.printSchema()"
				],
				"execution_count": null
			}
		]
	}
}