{
	"name": "OpenWeather EDA",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "openweather",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "1afb9d52-d0a5-40d8-a121-db1977ed8e02"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/34f89b90-47ae-412e-8758-934b3c3ef8f7/resourceGroups/junhuicho-DS598/providers/Microsoft.Synapse/workspaces/junhuichosynapse/bigDataPools/openweather",
				"name": "openweather",
				"type": "Spark",
				"endpoint": "https://junhuichosynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/openweather",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# OpenWeather Data EDA"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Configuration\n",
					"\n",
					"- Synapse is connected to my Github, so it is necessary to secure my API key. Key Vault access is only given to my personal account.\n",
					"    - It is smart enough that it prevents you from connecting Synapse to Github if there is a key exposed in the Synapse environment.\n",
					"    - Secured Key: Storage Account Key\n",
					"- Connect to my storage account where the OpenWeather data is stored."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from notebookutils import mssparkutils\n",
					"\n",
					"\n",
					"# Define Key Vault Name\n",
					"key_vault_name = \"openweather-junhui\"\n",
					"secret_name = \"storage-key\"  \n",
					"\n",
					"storage_account_name = \"junhuisa\"\n",
					"storage_account_key = mssparkutils.credentials.getSecret(key_vault_name, secret_name)\n",
					"\n",
					"spark.conf.set(\n",
					"    \"fs.azure.account.key.\" + storage_account_name + \".dfs.core.windows.net\",\n",
					"    storage_account_key\n",
					")"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Read data directly from ADLS Gen2\n",
					"container_name = \"blob1\"\n",
					"air_pollution_folder_path = \"bronze/historical_airpollution\"  # Folder, not a single file\n",
					"historical_weather_folder_path = \"bronze/historical_weather\"\n",
					"\n",
					"# Read all JSON files in the folder\n",
					"air_pollution_df = spark.read.json(f\"abfss://{container_name}@{storage_account_name}.dfs.core.windows.net/{air_pollution_folder_path}\")\n",
					"historical_weather_df = spark.read.json(f\"abfss://{container_name}@{storage_account_name}.dfs.core.windows.net/{historical_weather_folder_path}\")"
				],
				"execution_count": 85
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Data Observation\n",
					"\n",
					"Taking a look at the raw data."
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Historical Weather Data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": true
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Show the DataFrame\n",
					"\n",
					"historical_weather_df.head()"
				],
				"execution_count": 86
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Print schema\n",
					"\n",
					"historical_weather_df.printSchema()"
				],
				"execution_count": 87
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Count the number of rows to see if the data is loaded correctly\n",
					"# Ideally, there should be one row for each timestamp\n",
					"\n",
					"historical_weather_df.count()"
				],
				"execution_count": 88
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Air Pollution Data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": true
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"air_pollution_df.head()"
				],
				"execution_count": 89
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"air_pollution_df.printSchema()"
				],
				"execution_count": 90
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"air_pollution_df.count()"
				],
				"execution_count": 91
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Restructuring DataFrames"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Historical Weather Data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import explode\n",
					"\n",
					"# Flatten the 'list' column\n",
					"historical_weather_df = historical_weather_df.withColumn(\"list\", explode(historical_weather_df[\"list\"]))\n",
					"print(\"Number of rows after flattening the 'list':\", historical_weather_df.count())\n",
					"historical_weather_df.show(10, truncate=False)"
				],
				"execution_count": 92
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Instead of having a merged column of all fields,\n",
					"# extract each field out to have a its own column\n",
					"\n",
					"historical_weather_df = historical_weather_df.selectExpr(\n",
					"    \"calctime\", \n",
					"    \"city_id\", \n",
					"    \"cnt\", \n",
					"    \"cod\", \n",
					"    \"message\", \n",
					"    \"list.dt\",\n",
					"    \"list.main.temp as temp\",\n",
					"    \"list.main.feels_like as feels_like\",\n",
					"    \"list.main.humidity as humidity\",\n",
					"    \"list.main.pressure as pressure\",\n",
					"    \"list.main.temp_min as temp_min\",\n",
					"    \"list.main.temp_max as temp_max\",\n",
					"    \"list.wind.speed as wind_speed\",\n",
					"    \"list.wind.deg as wind_deg\",\n",
					"    \"list.wind.gust as wind_gust\",\n",
					"    \"list.clouds.all as clouds_all\",\n",
					"    \"list.weather.description as weather_description\",\n",
					"    \"list.weather.icon as weather_icon\",\n",
					"    \"list.weather.id as weather_id\",\n",
					"    \"list.weather.main as weather_main\",\n",
					"    \"list.rain.1h as rain_1h\",\n",
					"    \"list.snow.1h as snow_1h\"\n",
					")\n",
					"\n",
					"historical_weather_df.show(10, truncate=False)"
				],
				"execution_count": 93
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Air Pollution Data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"air_pollution_df = air_pollution_df.withColumn(\"list\", explode(air_pollution_df[\"list\"]))\n",
					"print(\"Number of rows after flattening the 'list':\", air_pollution_df.count())\n",
					"air_pollution_df.show(10, truncate=False)"
				],
				"execution_count": 94
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"air_pollution_df = air_pollution_df.selectExpr(\n",
					"    \"coord\",\n",
					"    \"list.dt as dt\",\n",
					"    \"list.main.aqi as aqi\",\n",
					"    \"list.components.co as co\",\n",
					"    \"list.components.no as no\",\n",
					"    \"list.components.no2 as no2\",\n",
					"    \"list.components.o3 as o3\",\n",
					"    \"list.components.so2 as so2\",\n",
					"    \"list.components.pm2_5 as pm2_5\",\n",
					"    \"list.components.pm10 as pm10\",\n",
					"    \"list.components.nh3 as nh3\"\n",
					")\n",
					"\n",
					"air_pollution_df.show(10, truncate=False)"
				],
				"execution_count": 95
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Data Cleaning"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Historical Weather Data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Copy in order to preserve the raw data\n",
					"cleaned_weather_df = historical_weather_df.select('*')\n",
					"\n",
					"# Drop meaningless columns and order by timestamp\n",
					"columns_to_drop = ['calctime', 'city_id', 'cnt', 'cod', 'message']\n",
					"cleaned_weather_df = cleaned_weather_df.drop(*columns_to_drop).orderBy(\"dt\")\n",
					"\n",
					"cleaned_weather_df.show(10, truncate=False)"
				],
				"execution_count": 96
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Convert to pandas for further analysis\n",
					"cleaned_weather_df = cleaned_weather_df.toPandas()\n",
					"\n",
					"cleaned_weather_df.head(10)"
				],
				"execution_count": 97
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Count the number of null values for each column\n",
					"cleaned_weather_nan_count = cleaned_weather_df.isnull().sum()\n",
					"\n",
					"print(cleaned_weather_nan_count)\n",
					"\n",
					"# According to the OpenWeather API documentation,\n",
					"# wind_gust - not described. A sudden increase in wind speed\n",
					"# rain_1h - Rain volume for the last 1 hour\n",
					"# snow_1h - Snow volume for the last 1 hour\n",
					"\n",
					"# Therefore, we can assume that having null values for these fields basically means 0\n",
					"# To confirm this, check whether there is any data with these values of 0\n",
					"print(\"Number of rows with rain_1h of value 0:\", (cleaned_weather_df['rain_1h'] == 0).sum())\n",
					"print(\"Number of rows with snow_1h of value 0:\", (cleaned_weather_df['snow_1h'] == 0).sum())\n",
					"print(\"Number of rows with wind_gust of value 0:\", (cleaned_weather_df['wind_gust'] == 0).sum())"
				],
				"execution_count": 98
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Fill the null values with 0\n",
					"cleaned_weather_df.fillna(0, inplace=True)\n",
					"\n",
					"print(cleaned_weather_df.isnull().sum())"
				],
				"execution_count": 99
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# According to OpenWeather API documentation, default temperature unit is Kelvin\n",
					"# Convert Kelvin into Fahrenheit for better insight\n",
					"\n",
					"cleaned_weather_df['temp'] = (cleaned_weather_df['temp'] - 273.15) * 9/5 + 32\n",
					"cleaned_weather_df['feels_like'] = (cleaned_weather_df['feels_like'] - 273.15) * 9/5 + 32\n",
					"cleaned_weather_df.head(10)"
				],
				"execution_count": 100
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Air Pollution Data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cleaned_air_pollution_df = air_pollution_df.select('*')\n",
					"\n",
					"# Drop meaningless columns and order by timestamp\n",
					"columns_to_drop = ['coord']\n",
					"cleaned_air_pollution_df = cleaned_air_pollution_df.drop(*columns_to_drop).orderBy(\"dt\")\n",
					"\n",
					"cleaned_air_pollution_df.show(10, truncate=False)"
				],
				"execution_count": 101
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cleaned_air_pollution_df = cleaned_air_pollution_df.toPandas()\n",
					"\n",
					"cleaned_air_pollution_df.head(10)"
				],
				"execution_count": 102
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cleaned_air_pollution_nan_count = cleaned_air_pollution_df.isnull().sum()\n",
					"\n",
					"print(cleaned_air_pollution_nan_count)"
				],
				"execution_count": 103
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Statistics"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Historical Weather Data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Generate basic statistics\n",
					"\n",
					"cleaned_weather_df.describe()"
				],
				"execution_count": 104
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Air Pollution Data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"cleaned_air_pollution_df.describe()"
				],
				"execution_count": 105
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Here, we can observe that there are obvious errors for 'no2' and 'pm10'. It is better not to change too much of the data, but ovbious errors like these can be replaced."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(\"Obvious errors in 'no2':\")\n",
					"print(cleaned_air_pollution_df[cleaned_air_pollution_df['no2'] < 0])\n",
					"\n",
					"print(\"Obvious erros in 'pm10':\")\n",
					"print(cleaned_air_pollution_df[cleaned_air_pollution_df['pm10'] < 0])"
				],
				"execution_count": 106
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Replace -9999s with 0\n",
					"cleaned_air_pollution_df.replace(-9999, 0, inplace=True)\n",
					"\n",
					"cleaned_air_pollution_df.describe()"
				],
				"execution_count": 107
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Correlation Matrix Between Two Datasets\n",
					"\n",
					"In order to draw a correlation matrix between these the two datasets, two dataframes are inner-joined with a common column 'dt'."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd\n",
					"\n",
					"joined_df = pd.merge(cleaned_weather_df, cleaned_air_pollution_df, on=\"dt\", how=\"inner\")\n",
					"\n",
					"joined_df.head(10)"
				],
				"execution_count": 108
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Check shape to see how many rows are in common and features are correctly joined\n",
					"print(joined_df.shape)"
				],
				"execution_count": 109
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Only select numercial features for correlation matrix\n",
					"numerical_df = joined_df.select_dtypes(include=['number'])\n",
					"\n",
					"numerical_df.head(10)"
				],
				"execution_count": 110
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import seaborn as sns\n",
					"import matplotlib.pyplot as plt\n",
					"\n",
					"corr_matrix = numerical_df.corr()\n",
					"\n",
					"plt.figure(figsize=(12, 8))\n",
					"sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)"
				],
				"execution_count": 111
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Data Visualizations"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Time Series: Temperature, Feels Like"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import matplotlib.dates as mdates\n",
					"\n",
					"plt.figure(figsize=(12, 6))\n",
					"plt.plot(pd.to_datetime(cleaned_weather_df['dt'], unit='s'), cleaned_weather_df['temp'], label='Temperature', linestyle='-', alpha=0.7)\n",
					"plt.plot(pd.to_datetime(cleaned_weather_df['dt'], unit='s'), cleaned_weather_df['feels_like'], label='Feels Like', linestyle='-', alpha=0.2)\n",
					"\n",
					"# Format x-axis so that it shows per month interval\n",
					"plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))\n",
					"plt.gca().xaxis.set_major_locator(mdates.MonthLocator(interval=1))\n",
					"plt.xticks(rotation=45)\n",
					"\n",
					"\n",
					"plt.xlabel('Time')\n",
					"plt.ylabel('Temperature (Fahrenheit)')\n",
					"plt.title('Temperature Over Time')\n",
					"plt.legend()"
				],
				"execution_count": 112
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Time Series: Difference in Actual and Apprent Temperature\n",
					"\n",
					"The difference is computed by -1 * ('temp' - 'feels_like'). The negation is applied to make the graph easier to read. For example, 10 means \"It feels like 10F more than it actually is\"."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"c1 = -42.379\n",
					"c2 = 2.04901523\n",
					"c3 = 10.14333127\n",
					"c4 = -0.22475541\n",
					"c5 = -6.83783e-3\n",
					"c6 = -5.481717e-2\n",
					"c7 = 1.22874e-3\n",
					"c8 = 8.5282e-4\n",
					"c9 = -1.99e-6\n",
					"\n",
					"T = cleaned_weather_df['temp']\n",
					"R = cleaned_weather_df['humidity']\n",
					"\n",
					"\n",
					"# Create the plot\n",
					"plt.figure(figsize=(12, 6))\n",
					"plt.plot(pd.to_datetime(cleaned_weather_df['dt'], unit='s'), -1 * (cleaned_weather_df['temp'] - cleaned_weather_df['feels_like']), label='Temperature', linestyle='-', alpha=0.7)\n",
					"\n",
					"# Format x-axis\n",
					"plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))  # Year-Month format\n",
					"plt.gca().xaxis.set_major_locator(mdates.MonthLocator(interval=1))  # Show every month\n",
					"plt.xticks(rotation=45)  # Rotate for better readability\n",
					"\n",
					"# Labels and title\n",
					"plt.xlabel('Time (Year-Month)')\n",
					"plt.ylabel('Temperature Gap')\n",
					"plt.title('Difference in Actual and Apparent (Feels Like) Over Time')\n",
					"plt.legend()"
				],
				"execution_count": 113
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Distribution: Air Quality Index\n",
					"\n",
					"Instead of looking at the distribution of rather continuous variables like temperature, it seems more reasonable to observe the distribution of air quality index because it has only 5 classes ranging from [1,5]."
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"aqi_counts = cleaned_air_pollution_df['aqi'].value_counts().sort_index()\n",
					"\n",
					"plt.figure(figsize=(8, 5))\n",
					"plt.bar(aqi_counts.index, aqi_counts.values, color='blue', alpha=0.7, edgecolor='black')\n",
					"\n",
					"plt.xlabel('AQI Category')\n",
					"plt.ylabel('Count')\n",
					"plt.title('Distribution of Air Quality Index (AQI)')\n",
					"plt.xticks([1, 2, 3, 4, 5])  # Ensure x-axis has correct AQI classes\n",
					"plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
					"\n",
					"plt.show()"
				],
				"execution_count": 114
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Humidity vs Temperature"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"plt.figure(figsize=(8, 5))\n",
					"plt.scatter(cleaned_weather_df['temp'], cleaned_weather_df['humidity'], alpha=0.5, color='blue')\n",
					"\n",
					"\n",
					"plt.xlabel('Temperature (Fahrenheit)')\n",
					"plt.ylabel('Humidity (%)')\n",
					"plt.title('Scatter Plot of Humidity vs Temperature')\n",
					"plt.grid(True, linestyle='--', alpha=0.5)\n",
					"\n",
					"plt.show()"
				],
				"execution_count": 115
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### "
				]
			}
		]
	}
}