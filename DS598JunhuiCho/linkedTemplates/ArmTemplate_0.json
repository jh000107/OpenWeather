{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DS598JunhuiCho"
		},
		"to_blob_sink_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'to_blob_sink'"
		},
		"airpollution_http_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://api.openweathermap.org/"
		},
		"historical_weather_http_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://history.openweathermap.org/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/airpollution_http')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('airpollution_http_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/historical_weather_http')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('historical_weather_http_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/to_blob_sink')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('to_blob_sink_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SilverAirPollutionData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "to_blob_sink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "silver/historical_airpollution",
						"container": "blob1"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/to_blob_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cleaned_weather_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "to_blob_sink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "silver/historical_weather",
						"container": "blob1"
					},
					"compressionCodec": "none"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/to_blob_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/historical_airpollution_bronze')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "to_blob_sink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "bronze/historical_airpollution",
						"container": "blob1"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"coord": {
							"type": "object",
							"properties": {
								"lon": {
									"type": "number"
								},
								"lat": {
									"type": "number"
								}
							}
						},
						"list": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"main": {
										"type": "object",
										"properties": {
											"aqi": {
												"type": "integer"
											}
										}
									},
									"components": {
										"type": "object",
										"properties": {
											"co": {
												"type": "number"
											},
											"no": {
												"type": "integer"
											},
											"no2": {
												"type": "number"
											},
											"o3": {
												"type": "number"
											},
											"so2": {
												"type": "number"
											},
											"pm2_5": {
												"type": "number"
											},
											"pm10": {
												"type": "number"
											},
											"nh3": {
												"type": "number"
											}
										}
									},
									"dt": {
										"type": "integer"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/to_blob_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/historical_airpollution_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "to_blob_sink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat(\n    'historical_airpollution_',\n    substring(convertFromUtc(utcNow(), 'Eastern Standard Time'), 0, 10),\n    '.json'\n)\n\n",
							"type": "Expression"
						},
						"folderPath": "bronze/historical_airpollution",
						"container": "blob1"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/to_blob_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/historical_airpollution_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "airpollution_http",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"lat": {
						"type": "string",
						"defaultValue": "42.3554"
					},
					"lon": {
						"type": "string",
						"defaultValue": "-71.0605"
					},
					"start": {
						"type": "string",
						"defaultValue": "1706504400"
					},
					"end": {
						"type": "string",
						"defaultValue": "1738181987"
					},
					"appid": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "data/2.5/air_pollution/history?lat=@{dataset().lat}&lon=@{dataset().lon}&start=@{dataset().start}&end=@{dataset().end}&appid=@{dataset().appid}",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/airpollution_http')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/historical_weather_bronze')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "to_blob_sink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "bronze/historical_weather",
						"container": "blob1"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"message": {
							"type": "string"
						},
						"cod": {
							"type": "string"
						},
						"city_id": {
							"type": "integer"
						},
						"calctime": {
							"type": "number"
						},
						"cnt": {
							"type": "integer"
						},
						"list": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"dt": {
										"type": "integer"
									},
									"main": {
										"type": "object",
										"properties": {
											"temp": {
												"type": "number"
											},
											"feels_like": {
												"type": "number"
											},
											"pressure": {
												"type": "integer"
											},
											"humidity": {
												"type": "integer"
											},
											"temp_min": {
												"type": "number"
											},
											"temp_max": {
												"type": "number"
											}
										}
									},
									"wind": {
										"type": "object",
										"properties": {
											"speed": {
												"type": "number"
											},
											"deg": {
												"type": "integer"
											},
											"gust": {
												"type": "number"
											}
										}
									},
									"clouds": {
										"type": "object",
										"properties": {
											"all": {
												"type": "integer"
											}
										}
									},
									"weather": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"main": {
													"type": "string"
												},
												"description": {
													"type": "string"
												},
												"icon": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/to_blob_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/historical_weather_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "to_blob_sink",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@{dataset().fileName}",
							"type": "Expression"
						},
						"folderPath": "bronze/historical_weather",
						"container": "blob1"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"message": {
							"type": "string"
						},
						"cod": {
							"type": "string"
						},
						"city_id": {
							"type": "integer"
						},
						"calctime": {
							"type": "number"
						},
						"cnt": {
							"type": "integer"
						},
						"list": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"dt": {
										"type": "integer"
									},
									"main": {
										"type": "object",
										"properties": {
											"temp": {
												"type": "number"
											},
											"feels_like": {
												"type": "number"
											},
											"pressure": {
												"type": "integer"
											},
											"humidity": {
												"type": "integer"
											},
											"temp_min": {
												"type": "number"
											},
											"temp_max": {
												"type": "number"
											}
										}
									},
									"wind": {
										"type": "object",
										"properties": {
											"speed": {
												"type": "number"
											},
											"deg": {
												"type": "integer"
											},
											"gust": {
												"type": "number"
											}
										}
									},
									"clouds": {
										"type": "object",
										"properties": {
											"all": {
												"type": "integer"
											}
										}
									},
									"weather": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"main": {
													"type": "string"
												},
												"description": {
													"type": "string"
												},
												"icon": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/to_blob_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/historical_weather_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "historical_weather_http",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"lat": {
						"type": "string",
						"defaultValue": "42.3554"
					},
					"lon": {
						"type": "string",
						"defaultValue": "-71.0605"
					},
					"start": {
						"type": "string"
					},
					"end": {
						"type": "string"
					},
					"dataType": {
						"type": "string",
						"defaultValue": "hour"
					},
					"appid": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "data/2.5/history/city?lat=@{dataset().lat}&lon=@{dataset().lon}&type=@{dataset().dataType}&start=@{dataset().start}&end=@{dataset().end}&appid=@{dataset().appid}",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/historical_weather_http')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historical Air Pollution Ingest Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "airpollution copy data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Retrieve API Key",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "historical_airpollution_source",
								"type": "DatasetReference",
								"parameters": {
									"lat": "42.3554",
									"lon": "-71.0605",
									"start": "1706504400",
									"end": "1738181987",
									"appid": {
										"value": "@activity('Retrieve API Key').output.value",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "historical_airpollution_sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Retrieve API Key",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://openweather-junhui.vault.azure.net/secrets/OPENWEATHER-API-KEY/b4359060dffb4c7aa4db06bf81b438fb?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-01-30T03:27:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/historical_airpollution_source')]",
				"[concat(variables('factoryId'), '/datasets/historical_airpollution_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historical Weather Ingest Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "For Each Week",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Retrieve API Key",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(0, pipeline().parameters.weeksAgo)",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "copy historical weather data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "historical_weather_source",
											"type": "DatasetReference",
											"parameters": {
												"lat": "42.3554",
												"lon": "-71.0605",
												"start": {
													"value": "@div(sub(ticks(addDays(utcNow(), mul(-7, add(item(), 1)))), ticks('1970-01-01T00:00:00Z')), 10000000)\n",
													"type": "Expression"
												},
												"end": {
													"value": "@div(sub(ticks(addDays(utcNow(), mul(-7, item()))), ticks('1970-01-01T00:00:00Z')), 10000000)\n",
													"type": "Expression"
												},
												"dataType": "hour",
												"appid": {
													"value": "@activity('Retrieve API Key').output.value",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "historical_weather_sink",
											"type": "DatasetReference",
											"parameters": {
												"fileName": {
													"value": "@concat('historical_weather_week_', item(), '.json')\n\n",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Retrieve API Key",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://openweather-junhui.vault.azure.net/secrets/OPENWEATHER-API-KEY/b4359060dffb4c7aa4db06bf81b438fb?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"weeksAgo": {
						"type": "int",
						"defaultValue": 52
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-09T17:18:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/historical_weather_source')]",
				"[concat(variables('factoryId'), '/datasets/historical_weather_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PreprocessAirPollutionData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "historical_airpollution_bronze",
								"type": "DatasetReference"
							},
							"name": "BronzeAirPollutionData",
							"description": "Add Air Pollution data from Bronze layer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SilverAirPollutionData",
								"type": "DatasetReference"
							},
							"name": "SilverAirPollutionData"
						}
					],
					"transformations": [
						{
							"name": "FlattenAndMapNestedFields"
						},
						{
							"name": "TimestampAndLocation",
							"description": "create corrected_timestamp and location"
						},
						{
							"name": "RemoveInvalidRows"
						},
						{
							"name": "DerivedColumns",
							"description": "Create id, date_time, and round pollutant metrics to 2 decimal places."
						},
						{
							"name": "DropUnnecessaryColumns",
							"description": "Drop timestamp."
						}
					],
					"scriptLines": [
						"source(output(",
						"          coord as (lon as double, lat as double),",
						"          list as (main as (aqi as integer), components as (co as double, no as integer, no2 as double, o3 as double, so2 as double, pm2_5 as double, pm10 as double, nh3 as double), dt as integer)[]",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     wildcardPaths:['bronze/historical_airpollution/*.json'],",
						"     partitionBy('hash', 1)) ~> BronzeAirPollutionData",
						"BronzeAirPollutionData foldDown(unroll(list),",
						"     mapColumn(",
						"          lon = coord.lon,",
						"          lat = coord.lat,",
						"          aqi = list.main.aqi,",
						"          co = list.components.co,",
						"          no = list.components.no,",
						"          no2 = list.components.no2,",
						"          o3 = list.components.o3,",
						"          so2 = list.components.so2,",
						"          pm2_5 = list.components.pm2_5,",
						"          pm10 = list.components.pm10,",
						"          nh3 = list.components.nh3,",
						"          timestamp = list.dt",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenAndMapNestedFields",
						"FlattenAndMapNestedFields derive(corrected_timestamp = iif(length(toString(timestamp)) == 10, toInteger(timestamp), toInteger(null())),",
						"          location = 'Boston',",
						"     partitionBy('hash', 1)) ~> TimestampAndLocation",
						"TimestampAndLocation filter(!isNull(aqi) && !isNull(corrected_timestamp),",
						"     partitionBy('hash', 1)) ~> RemoveInvalidRows",
						"RemoveInvalidRows derive(id = concat(location, toString(corrected_timestamp)),",
						"          date_time = toTimestamp(toLong(corrected_timestamp) * 1000),",
						"          co = round(co, 2),",
						"          no = round(no, 2),",
						"          no2 = round(no2, 2),",
						"          o3 = round(o3, 2),",
						"          so2 = round(so2, 2),",
						"          pm2_5 = round(pm2_5, 2),",
						"          pm10 = round(pm10, 2),",
						"          nh3 = round(nh3, 2),",
						"     partitionBy('hash', 1)) ~> DerivedColumns",
						"DerivedColumns select(mapColumn(",
						"          lon,",
						"          lat,",
						"          aqi,",
						"          co,",
						"          no,",
						"          no2,",
						"          o3,",
						"          so2,",
						"          pm2_5,",
						"          pm10,",
						"          nh3,",
						"          corrected_timestamp,",
						"          location,",
						"          id,",
						"          date_time",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DropUnnecessaryColumns",
						"DropUnnecessaryColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['airpollution_cleaned.parquet'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SilverAirPollutionData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/historical_airpollution_bronze')]",
				"[concat(variables('factoryId'), '/datasets/SilverAirPollutionData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PreprocessWeatherData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "historical_weather_bronze",
								"type": "DatasetReference"
							},
							"name": "BronzeWeatherData",
							"description": "Add Weather Data from Bronze Layer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "cleaned_weather_data",
								"type": "DatasetReference"
							},
							"name": "SilverWeatherData",
							"description": "Export data to Silver layer"
						}
					],
					"transformations": [
						{
							"name": "TimestampAndLocation",
							"description": "Transform timestamp and create unique ID for location (Boston)"
						},
						{
							"name": "RemoveInvalidRows"
						},
						{
							"name": "DerivedColumns",
							"description": "Creating/updating the columns 'message, cod, city_id, calctime, cnt, timestamp, temp, feels_like, pressure, humidity, temp_miån, temp_max, wind_speed, wind_deg, wind_gust, clouds_all, weather_id, weather_main, weather_description, weather_icon, corrected_timestamp, location'"
						},
						{
							"name": "RenameAndDrop",
							"description": "Rename columns, Drop unnecessary columns."
						},
						{
							"name": "FlattenAndMapNestedFields"
						}
					],
					"scriptLines": [
						"source(output(",
						"          calctime as double,",
						"          city_id as boolean,",
						"          cnt as short,",
						"          cod as short,",
						"          list as (clouds as (all as short), dt as integer, main as (feels_like as double, humidity as short, pressure as short, temp as double, temp_max as double, temp_min as double), rain as ({1h} as double), snow as ({1h} as double), weather as (description as string, icon as string, id as short, main as string)[], wind as (deg as short, gust as double, speed as double))[],",
						"          message as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     wildcardPaths:['bronze/historical_weather/*.json'],",
						"     partitionBy('hash', 1)) ~> BronzeWeatherData",
						"FlattenAndMapNestedFields derive(corrected_timestamp = iif(length(toString(timestamp)) == 10, timestamp, toInteger(null())),",
						"          location = 'Boston',",
						"     partitionBy('hash', 1)) ~> TimestampAndLocation",
						"TimestampAndLocation filter(!isNull(temp) && !isNull(humidity) && !isNull(feels_like) && !isNull(weather_main) && !isNull(corrected_timestamp),",
						"     partitionBy('hash', 1)) ~> RemoveInvalidRows",
						"RemoveInvalidRows derive(date_time = toTimestamp(toLong(corrected_timestamp) * 1000),",
						"          id = concat(location, toString(corrected_timestamp)),",
						"          temp_C = round(temp - 273.15),",
						"          temp_min_C = round(temp_min - 273.15),",
						"          temp_max_C = round(temp_max - 273.15),",
						"          feels_like_C = round(feels_like - 273.15),",
						"          temp_min_F = round((temp_min-273.15) * 9/5 + 32),",
						"          temp_max_F = round((temp_max-273.15) * 9/5 + 32),",
						"          feels_like_F = round((feels_like-273.15) * 9/5 + 32),",
						"          lon = -71.0589,",
						"          lat = 42.3601,",
						"          weather_id_value = weather_id,",
						"          weather_main_value = weather_main,",
						"          weather_description_value = weather_description,",
						"          weather_icon_value = weather_icon,",
						"          rain_1h = iif(isNull(rain_1h), toFloat(0.0), toFloat(round(rain_1h, 2))),",
						"          snow_1h = iif(isNull(snow_1h), toFloat(0.0), toFloat(round(snow_1h, 2))),",
						"     partitionBy('hash', 1)) ~> DerivedColumns",
						"DerivedColumns select(mapColumn(",
						"          clouds_all,",
						"          feels_like_K = feels_like,",
						"          humidity,",
						"          pressure,",
						"          temp_K = temp,",
						"          temp_max_K = temp_max,",
						"          temp_min_K = temp_min,",
						"          rain_1h,",
						"          snow_1h,",
						"          wind_deg,",
						"          wind_gust,",
						"          wind_speed,",
						"          corrected_timestamp,",
						"          location,",
						"          date_time,",
						"          id,",
						"          temp_C,",
						"          temp_min_C,",
						"          temp_max_C,",
						"          feels_like_C,",
						"          temp_min_F,",
						"          temp_max_F,",
						"          feels_like_F,",
						"          lon,",
						"          lat,",
						"          weather_id_value,",
						"          weather_main_value,",
						"          weather_description_value,",
						"          weather_icon_value",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameAndDrop",
						"BronzeWeatherData foldDown(unrollMultiple(list,list.weather),",
						"     mapColumn(",
						"          calctime,",
						"          city_id,",
						"          cnt,",
						"          cod,",
						"          message,",
						"          clouds_all = list.clouds.all,",
						"          timestamp = list.dt,",
						"          feels_like = list.main.feels_like,",
						"          humidity = list.main.humidity,",
						"          pressure = list.main.pressure,",
						"          temp = list.main.temp,",
						"          temp_max = list.main.temp_max,",
						"          temp_min = list.main.temp_min,",
						"          rain_1h = list.rain.{1h},",
						"          snow_1h = list.snow.{1h},",
						"          weather_description = list.weather.description,",
						"          weather_icon = list.weather.icon,",
						"          weather_id = list.weather.id,",
						"          weather_main = list.weather.main,",
						"          wind_deg = list.wind.deg,",
						"          wind_gust = list.wind.gust,",
						"          wind_speed = list.wind.speed",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenAndMapNestedFields",
						"RenameAndDrop sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['weather_cleaned.parquet'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SilverWeatherData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/historical_weather_bronze')]",
				"[concat(variables('factoryId'), '/datasets/cleaned_weather_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historical Air Pollution Preprocessing Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PreprocessAirPollutionData",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PreprocessAirPollutionData",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BronzeAirPollutionData": {},
									"SilverAirPollutionData": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/PreprocessAirPollutionData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historical Weather Preprocessing Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PreprocessWeatherData",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PreprocessWeatherData",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BronzeWeatherData": {},
									"SilverWeatherData": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/PreprocessWeatherData')]"
			]
		}
	]
}